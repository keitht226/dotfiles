set wildignore+=*/tmp/*,*.so,*.swp,*.zip    " Unix
set wildignore+=*\\tmp\\*,*.swp,*.zip,*.exe " Windows
set hidden                                  " treat tabs like other editors
set nu                                      " show line numbers
set showcmd                                 " show multiple commands in command line
set whichwrap=b,s,h,l,<,>,~,[,]             " everything wraps
set mouse=a                                 " allow use of mouse
set ttymouse=xterm2                         " Enable mouse for xterm
set incsearch                               " incremental search
set ruler                                   " show current position
set showcmd                                 " show matching brackets
set cursorline                              " highlight current line
set scrolloff=3                             " Screen automatically scrolls with curser
set lazyredraw                              " redraw only when needed
set timeout timeoutlen=3000 ttimeoutlen=100 " prevent lag when leaving/entering insert mode
set backspace=indent,eol,start              "back space is more intuitive
set confirm                                 "asks for confirmation instead of giving error

" get out of vi-compatible mode and don't use local .vimrc
set noexrc
set nocompatible

"filetype specific indenting and syntax coloring
filetype indent plugin on
syntax on
set autoindent " works in conjunction with filetype indenting

"highlight search and search isn't case-sensitive unless caps
set hlsearch
set ignorecase
set smartcase

"change length of tabs
set shiftwidth=2
set softtabstop=2

"no real tabs(spaces instead)
set expandtab
set smarttab

"Folding
set foldmethod=manual
" Save Folds When exit buffer
augroup AutoSaveFolds
  autocmd!
  autocmd BufWinLeave *.* mkview
  autocmd BufWinEnter *.* silent loadview
augroup END

" toggle set paste (prevents auto indent when pasting from clip-board
set pastetoggle=<F2>
set noshowmode

"place vertical bar after certain amount of characters
if exists('+colorcolumn')
  set colorcolumn=81
else
  au BufWinEnter * let w:m2=matchadd('ErrorMsg', '\%>80v.\+', -1)
endif

" vimgrep configuration------------------------------------------------------
function! GrepFileType(item, ...)
  let file_types = ""
  for arg in a:000
    let file_types = file_types . "**/*" . arg . " "
  endfor
  execute "noatuocmd vimgrep /" . a:item . "/j " . file_types | copen
endfunction

" Calls above function. Requires at least 2 args. First arg is the word
" to grep for. Spaces cannot be included! The following arguments
" are file types to search.
" ex: :Mygrep thing_to_find .hpp .cpp
command! -nargs=+ Mygrep :call GrepFileType(<f-args>)

" automatically open quick fix menu after grep
augroup grep_au
  autocmd!
  autocmd QuickFixCmdPost [^l]* cwindow
  autocmd QuickFixCmdPost l* lwindow
augroup END

" Quick fix menu will always go horizontally across the bottom of all
" windows rather than just the current window
augroup qf_window_down
  autocmd!
  autocmd FileType qf wincmd J
augroup end

"-----------------------------------------------------------------------------
" Remaps settings 
"-----------------------------------------------------------------------------
" F-key summary
" F1: update plugins
" F2: Toggle Paste mode
" F3: Open buffer list
" F4: ALE
" F5: Jump to header / src
" F6: Jump to previous buffer
" F7: Jump to definition
" F8: Toggle tagbar
" F9: Generate Tags in working directory
"
"shorcut for replacing word under cursor with yanked word without overwriting yank buffer
nnoremap <leader>p ciw<C-r>0<ESC>

"insert blank lines above/below
nnoremap <leader>o o<esc>
nnoremap <leader>O O<esc>

"double click will highlight all occurences of word in either mode
map <2-LeftMouse> *
imap <2-LeftMouse> <c-o>*

"remap no hlsearch to space
nnoremap <leader><space> :nohlsearch<CR>

" Move lines up or down
map <C-DOWN> :m .+1<CR>==
nnoremap <C-UP> :m .-2<CR>==
inoremap <C-DOWN> <Esc>:m .+1<CR>==gi
inoremap <C-UP> <Esc>:m .-2<CR>==gi
vnoremap <C-DOWN> :m '>+1<CR>gv=gv
vnoremap <C-UP> :m '<-2<CR>gv=gv

"move vertically by visual line instead of line number
nnoremap j gj
nnoremap k gk

" List buffers in a new window
nnoremap <F3> :buffers<CR>:buffer<Space>

" jump to previous buffer
nmap <F6> <C-^>
" jump to definition (must have ctags)
nmap <F7> <C-]>
" generate ctags in working directory
nmap <F9> :!ctags -R .<CR>

" C/C++ function header block
map <C-f> :set formatoptions-=cro<CR>o// --------------------------------------------------------------------------------<ESC>080ld$o//<CR>// Routine: <CR>//<CR>// Purpose: <CR>//<CR>// Notes: <CR>//<CR>//--------------------------------------------------------------------------------<ESC>080ld$06k:set formatoptions+=cro<CR>
imap <C-f> :set formatoptions-=cro<CR>// --------------------------------------------------------------------------------<ESC>080ld$o//<CR>// Routine: <CR>//<CR>// Purpose: <CR>//<CR>// Notes: <CR>//<CR>//--------------------------------------------------------------------------------<ESC>080ld$06k:set formatoptions+=cro<CR>

"
" Toggle quick fix and location lists
"
function! GetBufferList()
  redir =>buflist
  silent! ls!
  redir END
  return buflist
endfunction

function! ToggleList(bufname, pfx)
  let buflist = GetBufferList()
  for bufnum in map(filter(split(buflist, '\n'), 'v:val =~ "'.a:bufname.'"'), 'str2nr(matchstr(v:val, "\\d\\+"))')
    if bufwinnr(bufnum) != -1
      exec(a:pfx.'close')
      return
    endif
  endfor
  if a:pfx == 'l' && len(getloclist(0)) == 0
      echohl ErrorMsg
      echo "Location List is Empty."
      return
  endif
  let winnr = winnr()
  exec(a:pfx.'open')
  if winnr() != winnr
    wincmd p
  endif
endfunction

nmap <silent> <leader>l :call ToggleList("Location List", 'l')<CR>
nmap <silent> <leader>e :call ToggleList("Quickfix List", 'c')<CR>
